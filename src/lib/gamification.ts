// –°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤
// –í–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–æ Duolingo + Headspace

export interface GamificationProgress {
  userId: string
  xp: number
  level: number
  streak: number
  longestStreak: number
  freezesUsed: number
  maxFreezes: number
  badges: UserBadge[]
  wellnessScore: number // 0-100, –∫–æ–º–±–æ learning + emotional health
  emotionalGrowthMetrics: EmotionalGrowthMetrics
  lastCheckIn: Date
  totalLessonsCompleted: number
  totalPracticesCompleted: number
  totalMinutesLearned: number
}

export interface UserBadge {
  badgeId: string
  earnedDate: Date
  tier?: 'bronze' | 'silver' | 'gold' | 'platinum'
}

export interface EmotionalGrowthMetrics {
  anxietyReduction: number // -100 to +100 (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ = —Å–Ω–∏–∂–µ–Ω–∏–µ)
  moodImprovement: number // -100 to +100
  boundaryConfidence: number // 0-100
  selfAwarenessLevel: number // 0-100
  communicationSkills: number // 0-100
  emotionalRegulation: number // 0-100
}

export interface Badge {
  id: string
  name: string
  description: string
  icon: string
  category: 'learning' | 'emotional' | 'social' | 'streak' | 'special'
  criteria: BadgeCriteria
  tiers?: ('bronze' | 'silver' | 'gold' | 'platinum')[]
  rarity: 'common' | 'rare' | 'epic' | 'legendary'
  emotionalMessage: string // –û—Å–æ–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–∞
}

export interface BadgeCriteria {
  type: 'lessons_completed' | 'streak' | 'xp' | 'mood_improvement' | 'anxiety_reduction' | 
        'practice_consistency' | 'boundary_skill' | 'special_achievement'
  threshold: number | SpecialCriteria
}

export interface SpecialCriteria {
  check: (progress: GamificationProgress) => boolean
  description: string
}

// ============================================
// GAMIFICATION ENGINE
// ============================================

export class GamificationEngine {
  /**
   * –ù–∞—á–∏—Å–ª—è–µ—Ç XP –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ
   */
  awardXP(
    progress: GamificationProgress,
    action: 'lesson_completed' | 'quiz_perfect' | 'practice_done' | 'check_in' | 'homework_done' | 'helped_peer',
    performance?: number
  ): { newXP: number; levelUp: boolean; newLevel?: number } {
    let xpGain = 0
    
    switch (action) {
      case 'lesson_completed':
        xpGain = 50 + (performance ? Math.round(performance / 2) : 0) // 50-100 XP
        break
      case 'quiz_perfect':
        xpGain = 30
        break
      case 'practice_done':
        xpGain = 40
        break
      case 'check_in':
        xpGain = 10
        break
      case 'homework_done':
        xpGain = 25
        break
      case 'helped_peer':
        xpGain = 20
        break
    }
    
    // –ë–æ–Ω—É—Å –∑–∞ streak
    if (progress.streak >= 7) {
      xpGain = Math.round(xpGain * 1.2)
    }
    if (progress.streak >= 30) {
      xpGain = Math.round(xpGain * 1.5)
    }
    
    const newXP = progress.xp + xpGain
    const currentLevel = progress.level
    const newLevel = this.calculateLevel(newXP)
    const levelUp = newLevel > currentLevel
    
    return {
      newXP,
      levelUp,
      newLevel: levelUp ? newLevel : undefined
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ XP (–Ω–µ–ª–∏–Ω–µ–π–Ω—ã–π —Ä–æ—Å—Ç –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏)
   */
  private calculateLevel(xp: number): number {
    // –§–æ—Ä–º—É–ª–∞: level = floor(sqrt(xp / 100))
    // –£—Ä–æ–≤–µ–Ω—å 1: 100 XP
    // –£—Ä–æ–≤–µ–Ω—å 2: 400 XP
    // –£—Ä–æ–≤–µ–Ω—å 3: 900 XP
    // –£—Ä–æ–≤–µ–Ω—å 5: 2500 XP
    // –£—Ä–æ–≤–µ–Ω—å 10: 10000 XP
    return Math.floor(Math.sqrt(xp / 100)) + 1
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç streak (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç "–∑–∞–±—ã–ª –æ–¥–∏–Ω –¥–µ–Ω—å = –ø–æ—Ç–µ—Ä—è –≤—Å–µ–≥–æ")
   */
  updateStreak(
    progress: GamificationProgress,
    lastActiveDate: Date,
    now: Date = new Date()
  ): { newStreak: number; streakLost: boolean; freezeUsed: boolean } {
    const daysDiff = Math.floor((now.getTime() - lastActiveDate.getTime()) / (1000 * 60 * 60 * 24))
    
    if (daysDiff === 0) {
      // –°–µ–≥–æ–¥–Ω—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã
      return { newStreak: progress.streak, streakLost: false, freezeUsed: false }
    }
    
    if (daysDiff === 1) {
      // –í—á–µ—Ä–∞ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã ‚Äî streak –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
      const newStreak = progress.streak + 1
      return { 
        newStreak, 
        streakLost: false, 
        freezeUsed: false 
      }
    }
    
    if (daysDiff === 2 && progress.freezesUsed < progress.maxFreezes) {
      // –ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–µ–Ω—å, –Ω–æ –µ—Å—Ç—å freeze
      return {
        newStreak: progress.streak,
        streakLost: false,
        freezeUsed: true
      }
    }
    
    // Streak –ø–æ—Ç–µ—Ä—è–Ω
    return {
      newStreak: 1, // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
      streakLost: true,
      freezeUsed: false
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ –Ω–æ–≤—ã–µ –±–µ–π–¥–∂–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω—ã
   */
  checkNewBadges(
    progress: GamificationProgress,
    allBadges: Badge[]
  ): Badge[] {
    const earnedBadgeIds = progress.badges.map(b => b.badgeId)
    const newBadges: Badge[] = []
    
    for (const badge of allBadges) {
      // –£–∂–µ –µ—Å—Ç—å?
      if (earnedBadgeIds.includes(badge.id)) continue
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
      if (this.checkBadgeCriteria(badge, progress)) {
        newBadges.push(badge)
      }
    }
    
    return newBadges
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ–¥–Ω–æ–≥–æ –±–µ–π–¥–∂–∞
   */
  private checkBadgeCriteria(badge: Badge, progress: GamificationProgress): boolean {
    const { type, threshold } = badge.criteria
    
    switch (type) {
      case 'lessons_completed':
        return progress.totalLessonsCompleted >= (threshold as number)
      
      case 'streak':
        return progress.streak >= (threshold as number)
      
      case 'xp':
        return progress.xp >= (threshold as number)
      
      case 'mood_improvement':
        return progress.emotionalGrowthMetrics.moodImprovement >= (threshold as number)
      
      case 'anxiety_reduction':
        return progress.emotionalGrowthMetrics.anxietyReduction >= (threshold as number)
      
      case 'practice_consistency':
        return progress.totalPracticesCompleted >= (threshold as number)
      
      case 'boundary_skill':
        return progress.emotionalGrowthMetrics.boundaryConfidence >= (threshold as number)
      
      case 'special_achievement':
        const specialCriteria = threshold as SpecialCriteria
        return specialCriteria.check(progress)
      
      default:
        return false
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç Wellness Score (—Ö–æ–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
   */
  calculateWellnessScore(progress: GamificationProgress): number {
    const learningProgress = Math.min(100, (progress.totalLessonsCompleted / 50) * 100)
    const consistencyScore = Math.min(100, (progress.streak / 30) * 100)
    
    const emotionalScore = (
      progress.emotionalGrowthMetrics.moodImprovement +
      progress.emotionalGrowthMetrics.anxietyReduction +
      progress.emotionalGrowthMetrics.selfAwarenessLevel
    ) / 3
    
    // –í–µ—Å: 40% –æ–±—É—á–µ–Ω–∏–µ, 30% —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç, 30% –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ
    const wellnessScore = (
      learningProgress * 0.4 +
      Math.max(0, emotionalScore) * 0.3 +
      consistencyScore * 0.3
    )
    
    return Math.round(Math.min(100, Math.max(0, wellnessScore)))
  }
}

// ============================================
// BADGE DEFINITIONS (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤!)
// ============================================

export const TEEN_BADGES: Badge[] = [
  // ========== LEARNING BADGES ==========
  {
    id: 'first-lesson',
    name: '–ü–µ—Ä–≤—ã–π —à–∞–≥',
    description: '–ó–∞–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫',
    icon: 'üå±',
    category: 'learning',
    criteria: { type: 'lessons_completed', threshold: 1 },
    rarity: 'common',
    emotionalMessage: '–ì–æ—Ä–¥–∏—Å—å —Å–æ–±–æ–π! –ù–∞—á–∞—Ç—å ‚Äî —ç—Ç–æ —Å–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ, –∏ —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è.'
  },
  {
    id: 'module-master',
    name: '–ú–∞—Å—Ç–µ—Ä –º–æ–¥—É–ª—è',
    description: '–ó–∞–≤–µ—Ä—à–∏–ª –≤—Å–µ —É—Ä–æ–∫–∏ –º–æ–¥—É–ª—è "–õ–∏—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã"',
    icon: 'üõ°Ô∏è',
    category: 'learning',
    criteria: { type: 'lessons_completed', threshold: 9 },
    rarity: 'rare',
    emotionalMessage: '–¢—ã –ø—Ä–æ—à–µ–ª –ø—É—Ç—å –æ—Ç –Ω–µ–∑–Ω–∞–Ω–∏—è –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É. –¢–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ–ø–µ—Ä—å —Å–∏–ª—å–Ω–µ–µ!'
  },
  {
    id: 'knowledge-seeker',
    name: '–ò—Å–∫–∞—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π',
    description: '–ó–∞–≤–µ—Ä—à–∏–ª 25 —É—Ä–æ–∫–æ–≤',
    icon: 'üìö',
    category: 'learning',
    criteria: { type: 'lessons_completed', threshold: 25 },
    rarity: 'epic',
    emotionalMessage: '–¢–≤–æ–µ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ –∏ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –≤–ø–µ—á–∞—Ç–ª—è—é—Ç!'
  },
  {
    id: 'wisdom-keeper',
    name: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –º—É–¥—Ä–æ—Å—Ç–∏',
    description: '–ó–∞–≤–µ—Ä—à–∏–ª 50 —É—Ä–æ–∫–æ–≤',
    icon: 'ü¶â',
    category: 'learning',
    criteria: { type: 'lessons_completed', threshold: 50 },
    rarity: 'legendary',
    emotionalMessage: '–¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —É—á–∏—à—å—Å—è ‚Äî —Ç—ã –º–µ–Ω—è–µ—à—å —Å–µ–±—è. –≠—Ç–æ –æ–≥—Ä–æ–º–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!'
  },

  // ========== EMOTIONAL GROWTH BADGES ==========
  {
    id: 'mood-warrior',
    name: '–í–æ–∏–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
    description: '–£–ª—É—á—à–∏–ª —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ 20%',
    icon: 'üåà',
    category: 'emotional',
    criteria: { type: 'mood_improvement', threshold: 20 },
    rarity: 'rare',
    emotionalMessage: '–¢–≤–æ—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —Å–æ–±–æ–π –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø–ª–æ–¥—ã. –¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —ç—Ç–æ?'
  },
  {
    id: 'calm-master',
    name: '–ú–∞—Å—Ç–µ—Ä —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è',
    description: '–°–Ω–∏–∑–∏–ª —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ 30%',
    icon: 'üßò',
    category: 'emotional',
    criteria: { type: 'anxiety_reduction', threshold: 30 },
    rarity: 'epic',
    emotionalMessage: '–¢—ã –Ω–∞—É—á–∏–ª—Å—è —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–µ–≤–æ–≥–æ–π –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–Ω–∞ —É–ø—Ä–∞–≤–ª—è–ª–∞ —Ç–æ–±–æ–π.'
  },
  {
    id: 'boundary-guardian',
    name: '–°—Ç—Ä–∞–∂ –≥—Ä–∞–Ω–∏—Ü',
    description: '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –¥–æ—Å—Ç–∏–≥–ª–∞ 70%',
    icon: 'üõ°Ô∏è',
    category: 'emotional',
    criteria: { type: 'boundary_skill', threshold: 70 },
    rarity: 'epic',
    emotionalMessage: '–¢—ã –Ω–∞—É—á–∏–ª—Å—è –≥–æ–≤–æ—Ä–∏—Ç—å "–Ω–µ—Ç" –∏ –∑–∞—â–∏—â–∞—Ç—å —Å–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ. –≠—Ç–æ —Å–∏–ª–∞!'
  },
  {
    id: 'self-love-champion',
    name: '–ß–µ–º–ø–∏–æ–Ω —Å–∞–º–æ–ª—é–±–≤–∏',
    description: '–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞–ª —Å–∞–º–æ—Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ 30 —Ä–∞–∑',
    icon: 'üíñ',
    category: 'emotional',
    criteria: { type: 'practice_consistency', threshold: 30 },
    rarity: 'rare',
    emotionalMessage: '–ó–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ ‚Äî –Ω–µ —ç–≥–æ–∏–∑–º. –¢—ã —ç—Ç–æ –ø–æ–Ω—è–ª, –∏ —ç—Ç–æ –º–µ–Ω—è–µ—Ç –≤—Å–µ!'
  },

  // ========== STREAK BADGES ==========
  {
    id: 'week-warrior',
    name: '–ù–µ–¥–µ–ª—å–Ω—ã–π –±–æ–µ—Ü',
    description: 'Streak 7 –¥–Ω–µ–π',
    icon: 'üî•',
    category: 'streak',
    criteria: { type: 'streak', threshold: 7 },
    rarity: 'common',
    emotionalMessage: '–¶–µ–ª–∞—è –Ω–µ–¥–µ–ª—è! –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ ‚Äî —ç—Ç–æ —Ç–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞.'
  },
  {
    id: 'month-master',
    name: '–ú–µ—Å—è—á–Ω—ã–π –º–∞—Å—Ç–µ—Ä',
    description: 'Streak 30 –¥–Ω–µ–π',
    icon: '‚ö°',
    category: 'streak',
    criteria: { type: 'streak', threshold: 30 },
    rarity: 'rare',
    emotionalMessage: '–ú–µ—Å—è—Ü –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤! –¢—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª –æ–±—É—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤—ã—á–∫—É.'
  },
  {
    id: 'unstoppable',
    name: '–ù–µ—É–¥–µ—Ä–∂–∏–º—ã–π',
    description: 'Streak 100 –¥–Ω–µ–π',
    icon: 'üöÄ',
    category: 'streak',
    criteria: { type: 'streak', threshold: 100 },
    rarity: 'legendary',
    emotionalMessage: '100 –¥–Ω–µ–π! –¢—ã –¥–æ–∫–∞–∑–∞–ª —Å–µ–±–µ, —á—Ç–æ –º–æ–∂–µ—à—å –¥–æ—Å—Ç–∏–≥–∞—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–≥–æ.'
  },

  // ========== SOCIAL BADGES ==========
  {
    id: 'peer-supporter',
    name: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä—É–∑–µ–π',
    description: '–ü–æ–º–æ–≥ 5 –¥—Ä—É–∑—å—è–º –≤ –∏—Ö –ø—É—Ç–∏',
    icon: 'ü§ù',
    category: 'social',
    criteria: { 
      type: 'special_achievement',
      threshold: {
        check: (progress) => {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–º–æ–≥ –ª–∏ –¥—Ä—É–≥–∏–º (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏)
          return false // –ó–∞–≥–ª—É—à–∫–∞
        },
        description: '–ü–æ–º–æ—á—å 5 –¥—Ä—É–∑—å—è–º'
      } as SpecialCriteria
    },
    rarity: 'rare',
    emotionalMessage: '–¢—ã –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ç–µ—à—å —Å–∞–º ‚Äî —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å –¥—Ä—É–≥–∏–º. –ù–∞—Å—Ç–æ—è—â–∏–π –ª–∏–¥–µ—Ä!'
  },

  // ========== SPECIAL/FUN BADGES ==========
  {
    id: 'night-owl',
    name: '–ù–æ—á–Ω–∞—è —Å–æ–≤–∞',
    description: '–ó–∞–≤–µ—Ä—à–∏–ª —É—Ä–æ–∫ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏',
    icon: 'ü¶â',
    category: 'special',
    criteria: {
      type: 'special_achievement',
      threshold: {
        check: (progress) => {
          const now = new Date()
          return now.getHours() >= 0 && now.getHours() < 6
        },
        description: '–£—á–∏—Ç—å—Å—è –Ω–æ—á—å—é'
      } as SpecialCriteria
    },
    rarity: 'common',
    emotionalMessage: '–î–∞–∂–µ –Ω–æ—á—å—é —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å –≤—Ä–µ–º—è –¥–ª—è —Å–µ–±—è. –ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–æ–Ω! üò¥'
  },
  {
    id: 'comeback-kid',
    name: '–í–µ—Ä–Ω—É–≤—à–∏–π—Å—è –±–æ–µ—Ü',
    description: '–í–µ—Ä–Ω—É–ª—Å—è –ø–æ—Å–ª–µ –ø–æ—Ç–µ—Ä–∏ streak',
    icon: 'üí™',
    category: 'special',
    criteria: {
      type: 'special_achievement',
      threshold: {
        check: (progress) => {
          return progress.longestStreak > progress.streak && progress.streak >= 7
        },
        description: '–í–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–æ—Ç–µ—Ä–∏ streak'
      } as SpecialCriteria
    },
    rarity: 'epic',
    emotionalMessage: '–¢—ã —É–ø–∞–ª –∏ –≤—Å—Ç–∞–ª. –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è —Å–∏–ª–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞!'
  },
  {
    id: 'perfect-student',
    name: '–ò–¥–µ–∞–ª—å–Ω—ã–π —É—á–µ–Ω–∏–∫',
    description: '–ü–æ–ª—É—á–∏–ª 100% –Ω–∞ 10 —Ç–µ—Å—Ç–∞—Ö –ø–æ–¥—Ä—è–¥',
    icon: 'üåü',
    category: 'special',
    criteria: {
      type: 'special_achievement',
      threshold: {
        check: (progress) => {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–∏ –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
          return false
        },
        description: '10 –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤'
      } as SpecialCriteria
    },
    rarity: 'legendary',
    emotionalMessage: '–¢–≤–æ—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ä–∞–Ω–∏–µ —Ñ–µ–Ω–æ–º–µ–Ω–∞–ª—å–Ω—ã!'
  },
  {
    id: 'mindful-master',
    name: '–ú–∞—Å—Ç–µ—Ä –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏',
    description: '–î–µ–ª–∞–ª —á–µ–∫-–∏–Ω—ã 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'üß†',
    category: 'special',
    criteria: {
      type: 'special_achievement',
      threshold: {
        check: (progress) => {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ —á–µ–∫-–∏–Ω–æ–≤
          return false
        },
        description: '30 –¥–Ω–µ–π —á–µ–∫-–∏–Ω–æ–≤'
      } as SpecialCriteria
    },
    rarity: 'rare',
    emotionalMessage: '–¢—ã –Ω–∞—É—á–∏–ª—Å—è —Å–ª—É—à–∞—Ç—å —Å–µ–±—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –≠—Ç–æ –¥–∞—Ä!'
  }
]

// ============================================
// LEVEL TITLES (–¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏)
// ============================================

export const LEVEL_TITLES = [
  { level: 1, title: '–ù–æ–≤–∏—á–æ–∫', emoji: 'üå±' },
  { level: 3, title: '–ò—Å–∫–∞—Ç–µ–ª—å', emoji: 'üîç' },
  { level: 5, title: '–£—á–µ–Ω–∏–∫', emoji: 'üìñ' },
  { level: 10, title: '–ü—Ä–∞–∫—Ç–∏–∫', emoji: 'üéØ' },
  { level: 15, title: '–ú–∞—Å—Ç–µ—Ä', emoji: '‚≠ê' },
  { level: 20, title: '–≠–∫—Å–ø–µ—Ä—Ç', emoji: 'üèÜ' },
  { level: 30, title: '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫', emoji: 'ü¶â' },
  { level: 50, title: '–õ–µ–≥–µ–Ω–¥–∞', emoji: 'üëë' }
]

export function getLevelTitle(level: number): { title: string; emoji: string } {
  const sorted = [...LEVEL_TITLES].sort((a, b) => b.level - a.level)
  const match = sorted.find(lt => level >= lt.level)
  return match || LEVEL_TITLES[0]
}

// –≠–∫—Å–ø–æ—Ä—Ç
export const gamification = new GamificationEngine()
