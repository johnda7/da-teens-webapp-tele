import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Slider } from '@/components/ui/slider'
import { Textarea } from '@/components/ui/textarea'
import { Badge } from '@/components/ui/badge'
import { Heart, Moon, Brain, CheckCircle } from '@phosphor-icons/react'
import { toast } from 'sonner'

interface CheckInPanelProps {
  onCheckIn: (data: CheckInData) => void
  lastCheckIn: CheckInData | null
}

interface CheckInData {
  date: string
  mood: number
  anxiety: number
  sleepHours: number
  note?: string
}

const moodEmojis = ['üò¢', 'üòî', 'üòê', 'üôÇ', 'üòä', 'üòÑ', 'ü§ó', 'üòç', 'ü•∞', '‚ú®']
const moodLabels = ['–û—á–µ–Ω—å –ø–ª–æ—Ö–æ', '–ü–ª–æ—Ö–æ', '–ì—Ä—É—Å—Ç–Ω–æ', '–ù–æ—Ä–º–∞–ª—å–Ω–æ', '–•–æ—Ä–æ—à–æ', '–û—Ç–ª–∏—á–Ω–æ', '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–í–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω–æ', '–°—á–∞—Å—Ç–ª–∏–≤', '–ù–∞ –≤—ã—Å–æ—Ç–µ']

export default function CheckInPanel({ onCheckIn, lastCheckIn }: CheckInPanelProps) {
  const [mood, setMood] = useState<number>(5)
  const [anxiety, setAnxiety] = useState<number[]>([3])
  const [sleepHours, setSleepHours] = useState<number[]>([7])
  const [note, setNote] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)

  const today = new Date().toISOString().split('T')[0]
  const hasCheckedInToday = lastCheckIn?.date === today

  const handleSubmit = async () => {
    setIsSubmitting(true)
    
    try {
      const checkInData: CheckInData = {
        date: today,
        mood,
        anxiety: anxiety[0],
        sleepHours: sleepHours[0],
        note: note.trim() || undefined
      }
      
      onCheckIn(checkInData)
      
      // Success feedback
      toast.success('–ß–µ–∫-–∏–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!', {
        description: '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º–∏ –æ—â—É—â–µ–Ω–∏—è–º–∏ üíô'
      })
      
      // Reset form if it's a new check-in
      if (!hasCheckedInToday) {
        setNote('')
      }
    } catch (_error) {
      toast.error('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', {
        description: '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É'
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  const getSleepFeedback = (hours: number) => {
    if (hours < 6) return { text: '–ú–∞–ª–æ–≤–∞—Ç–æ —Å–Ω–∞', color: 'text-red-600' }
    if (hours < 7) return { text: '–ú–æ–∂–Ω–æ –±–æ–ª—å—à–µ', color: 'text-orange-600' }
    if (hours <= 9) return { text: '–û—Ç–ª–∏—á–Ω–æ!', color: 'text-green-600' }
    return { text: '–ú–Ω–æ–≥–æ —Å–Ω–∞', color: 'text-blue-600' }
  }

  const getAnxietyFeedback = (level: number) => {
    if (level <= 2) return { text: '–°–ø–æ–∫–æ–π–Ω–æ', color: 'text-green-600' }
    if (level <= 4) return { text: '–ù–µ–º–Ω–æ–≥–æ –≤–æ–ª–Ω—É–µ—à—å—Å—è', color: 'text-yellow-600' }
    if (level <= 6) return { text: '–ó–∞–º–µ—Ç–Ω–æ–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ', color: 'text-orange-600' }
    if (level <= 8) return { text: '–°–∏–ª—å–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞', color: 'text-red-600' }
    return { text: '–û—á–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ', color: 'text-red-700' }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center">
        <h2 className="text-2xl font-bold text-foreground">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω</h2>
        <p className="text-muted-foreground mt-1">
          {hasCheckedInToday ? '–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –æ—â—É—â–µ–Ω–∏—è' : '–ö–∞–∫ –¥–µ–ª–∞ —Å–µ–≥–æ–¥–Ω—è?'}
        </p>
      </div>

      {/* Today's Status */}
      {hasCheckedInToday && (
        <Card className="bg-green-50 border-green-200">
          <CardContent className="p-4">
            <div className="flex items-center gap-2">
              <CheckCircle className="w-5 h-5 text-green-600" weight="fill" />
              <span className="text-green-800 font-medium">–ß–µ–∫-–∏–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –µ—Å—Ç—å</span>
            </div>
          </CardContent>
        </Card>
      )}

      <div className="space-y-6">
        {/* Mood Check */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Heart className="w-5 h-5 text-accent" />
              –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            </CardTitle>
            <CardDescription>–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* Emoji Scale */}
            <div className="grid grid-cols-5 gap-2">
              {moodEmojis.map((emoji, index) => (
                <button
                  key={index}
                  onClick={() => setMood(index + 1)}
                  className={`p-3 rounded-lg border-2 transition-all ${
                    mood === index + 1 
                      ? 'border-primary bg-primary/10 scale-110' 
                      : 'border-border hover:border-primary/50'
                  }`}
                >
                  <div className="text-2xl">{emoji}</div>
                </button>
              ))}
            </div>
            
            {/* Current Selection */}
            <div className="text-center p-3 bg-muted/50 rounded-lg">
              <div className="text-3xl mb-1">{moodEmojis[mood - 1]}</div>
              <div className="text-sm font-medium">{moodLabels[mood - 1]}</div>
            </div>
          </CardContent>
        </Card>

        {/* Anxiety Level */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Brain className="w-5 h-5 text-orange-500" />
              –£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏
            </CardTitle>
            <CardDescription>–û—Ç 0 (—Å–æ–≤—Å–µ–º —Å–ø–æ–∫–æ–π–Ω–æ) –¥–æ 10 (–æ—á–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ)</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <Slider
                value={anxiety}
                onValueChange={setAnxiety}
                max={10}
                min={0}
                step={1}
                className="w-full"
              />
              <div className="flex justify-between text-xs text-muted-foreground">
                <span>0 - –°–ø–æ–∫–æ–π–Ω–æ</span>
                <span>5 - –°—Ä–µ–¥–Ω–µ</span>
                <span>10 - –û—á–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ</span>
              </div>
            </div>
            
            <div className="text-center p-3 bg-muted/50 rounded-lg">
              <div className="text-2xl font-bold text-foreground">{anxiety[0]}/10</div>
              <div className={`text-sm font-medium ${getAnxietyFeedback(anxiety[0]).color}`}>
                {getAnxietyFeedback(anxiety[0]).text}
              </div>
            </div>

            {anxiety[0] > 7 && (
              <div className="p-3 bg-orange-50 border border-orange-200 rounded-lg">
                <p className="text-sm text-orange-800">
                  –ö–∞–∂–µ—Ç—Å—è, —Ç—ã —Å–∏–ª—å–Ω–æ –≤–æ–ª–Ω—É–µ—à—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É üíô
                </p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Sleep Hours */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Moon className="w-5 h-5 text-indigo-500" />
              –°–æ–Ω –ø—Ä–æ—à–ª–æ–π –Ω–æ—á—å—é
            </CardTitle>
            <CardDescription>–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã —Å–ø–∞–ª?</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <Slider
                value={sleepHours}
                onValueChange={setSleepHours}
                max={12}
                min={3}
                step={0.5}
                className="w-full"
              />
              <div className="flex justify-between text-xs text-muted-foreground">
                <span>3 —á–∞—Å–∞</span>
                <span>7-8 —á–∞—Å–æ–≤</span>
                <span>12 —á–∞—Å–æ–≤</span>
              </div>
            </div>
            
            <div className="text-center p-3 bg-muted/50 rounded-lg">
              <div className="text-2xl font-bold text-foreground">{sleepHours[0]} —á</div>
              <div className={`text-sm font-medium ${getSleepFeedback(sleepHours[0]).color}`}>
                {getSleepFeedback(sleepHours[0]).text}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Quick Notes */}
        <Card>
          <CardHeader>
            <CardTitle>–ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞</CardTitle>
            <CardDescription>–ß—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ, —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–ø–æ–º–Ω–∏—Ç—å? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</CardDescription>
          </CardHeader>
          <CardContent>
            <Textarea
              value={note}
              onChange={(e) => setNote(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–•–æ—Ä–æ—à–æ –ø—Ä–æ—à–ª–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è' –∏–ª–∏ '–ü–æ—Å—Å–æ—Ä–∏–ª—Å—è —Å –¥—Ä—É–≥–æ–º'..."
              className="min-h-[100px] resize-none"
              maxLength={200}
            />
            <div className="text-xs text-muted-foreground mt-2 text-right">
              {note.length}/200
            </div>
          </CardContent>
        </Card>

        {/* Submit Button */}
        <Button 
          onClick={handleSubmit} 
          disabled={isSubmitting}
          size="lg" 
          className="w-full"
        >
          {isSubmitting ? '–°–æ—Ö—Ä–∞–Ω—è–µ–º...' : hasCheckedInToday ? '–û–±–Ω–æ–≤–∏—Ç—å —á–µ–∫-–∏–Ω' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ–∫-–∏–Ω'}
        </Button>

        {/* Weekly Progress */}
        <Card>
          <CardHeader>
            <CardTitle>–¢–≤–æ—è –Ω–µ–¥–µ–ª—è</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-7 gap-2">
              {['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'].map((day, index) => (
                <div key={index} className="text-center">
                  <div className="text-xs text-muted-foreground mb-1">{day}</div>
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm ${
                    index <= 2 ? 'bg-green-100 text-green-600' : 'bg-muted'
                  }`}>
                    {index <= 2 ? '‚úì' : ''}
                  </div>
                </div>
              ))}
            </div>
            <div className="mt-4 text-center">
              <Badge variant="secondary" className="gap-1">
                <CheckCircle className="w-3 h-3" />
                3 –¥–Ω—è –ø–æ–¥—Ä—è–¥
              </Badge>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}