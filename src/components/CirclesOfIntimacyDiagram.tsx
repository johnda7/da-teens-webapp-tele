/**
 * Circles of Intimacy Diagram
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ "5 –∫—Ä—É–≥–æ–≤ –±–ª–∏–∑–æ—Å—Ç–∏" –¥–ª—è –£—Ä–æ–∫–∞ 1
 * –§–∏–ª–æ—Å–æ—Ñ–∏—è: Jobs Simplicity + iOS 26 Liquid Glass
 */

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Card, CardContent } from '@/components/ui/card'

interface CircleInfo {
  id: string
  label: string
  description: string
  color: string
  icon: string
  examples: string[]
}

const circles: CircleInfo[] = [
  {
    id: 'self',
    label: '–Ø',
    description: '–¢–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä: –º—ã—Å–ª–∏, —á—É–≤—Å—Ç–≤–∞, —Ä–µ—à–µ–Ω–∏—è. –¢–æ–ª—å–∫–æ —Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å, –∫—Ç–æ —Ç—É–¥–∞ –≤–ø—É—Å–∫–∞—Ç—å.',
    color: 'bg-blue-500',
    icon: 'üîµ',
    examples: ['–ú–æ–∏ –º—ã—Å–ª–∏', '–ú–æ–∏ —á—É–≤—Å—Ç–≤–∞', '–ú–æ–∏ —Ä–µ—à–µ–Ω–∏—è']
  },
  {
    id: 'family',
    label: '–°–µ–º—å—è',
    description: '–†–æ–¥–∏—Ç–µ–ª–∏, –±—Ä–∞—Ç—å—è, —Å—ë—Å—Ç—Ä—ã. –° –Ω–∏–º–∏ –≥—Ä–∞–Ω–∏—Ü—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —Å–ª–æ–∂–Ω–µ–µ –≤—Å–µ–≥–æ, –Ω–æ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ!',
    color: 'bg-green-500',
    icon: 'üü¢',
    examples: ['–†–æ–¥–∏—Ç–µ–ª–∏', '–ë—Ä–∞—Ç—å—è –∏ —Å—ë—Å—Ç—Ä—ã', '–ë–ª–∏–∑–∫–∏–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏']
  },
  {
    id: 'friends',
    label: '–î—Ä—É–∑—å—è',
    description: '–ë–ª–∏–∑–∫–∏–µ –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º. –° –Ω–∏–º–∏ –ª–µ–≥—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏ –∑–∞—â–∏—â–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã.',
    color: 'bg-yellow-500',
    icon: 'üü°',
    examples: ['–õ—É—á—à–∏–π –¥—Ä—É–≥', '–ë–ª–∏–∑–∫–∏–µ –¥—Ä—É–∑—å—è', '–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ª—é–¥–∏']
  },
  {
    id: 'acquaintances',
    label: '–ó–Ω–∞–∫–æ–º—ã–µ',
    description: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏, —Å–æ—Å–µ–¥–∏, –∑–Ω–∞–∫–æ–º—ã–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π. –° –Ω–∏–º–∏ –Ω—É–∂–Ω—ã –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã.',
    color: 'bg-orange-500',
    icon: 'üü†',
    examples: ['–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏', '–°–æ—Å–µ–¥–∏', '–ó–Ω–∞–∫–æ–º—ã–µ']
  },
  {
    id: 'strangers',
    label: '–ù–µ–∑–Ω–∞–∫–æ–º—ã–µ',
    description: '–õ—é–¥–∏, –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã!',
    color: 'bg-red-500',
    icon: 'üî¥',
    examples: ['–ù–µ–∑–Ω–∞–∫–æ–º—Ü—ã', '–õ—é–¥–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ', '–õ—é–¥–∏ –Ω–∞ —É–ª–∏—Ü–µ']
  }
]

interface CirclesOfIntimacyDiagramProps {
  onCircleClick?: (circleId: string) => void
}

export default function CirclesOfIntimacyDiagram({ onCircleClick }: CirclesOfIntimacyDiagramProps) {
  const [selectedCircle, setSelectedCircle] = useState<string | null>(null)
  const [hoveredCircle, setHoveredCircle] = useState<string | null>(null)

  const handleCircleClick = (circleId: string) => {
    if (selectedCircle === circleId) {
      setSelectedCircle(null)
    } else {
      setSelectedCircle(circleId)
      onCircleClick?.(circleId)
    }
  }

  const selectedInfo = circles.find(c => c.id === selectedCircle)

  // –†–∞–∑–º–µ—Ä—ã –∫—Ä—É–≥–æ–≤ (–æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫ –∫—Ä–∞—é)
  const sizes = [80, 120, 160, 200, 240]
  const lineWidths = [3, 2.5, 2, 1.5, 1]

  return (
    <div className="w-full max-w-md mx-auto relative">
      {/* SVG –î–∏–∞–≥—Ä–∞–º–º–∞ */}
      <div className="relative aspect-square">
        <svg viewBox="0 0 300 300" className="w-full h-full">
          {/* –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫—Ä—É–≥–∏ */}
          {circles.map((circle, index) => {
            const size = sizes[index]
            const strokeWidth = lineWidths[index]
            const isSelected = selectedCircle === circle.id
            const isHovered = hoveredCircle === circle.id

            return (
              <motion.circle
                key={circle.id}
                cx="150"
                cy="150"
                r={size}
                fill="none"
                stroke={circle.color}
                strokeWidth={strokeWidth}
                strokeDasharray={isSelected || isHovered ? '0' : '5,5'}
                opacity={isSelected || isHovered ? 1 : 0.3}
                className="cursor-pointer transition-all"
                whileHover={{ opacity: 0.6 }}
                onClick={() => handleCircleClick(circle.id)}
                onMouseEnter={() => setHoveredCircle(circle.id)}
                onMouseLeave={() => setHoveredCircle(null)}
              />
            )
          })}

          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ */}
          <motion.circle
            cx="150"
            cy="150"
            r="30"
            fill="url(#gradient-center)"
            className="cursor-pointer"
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => handleCircleClick('self')}
          >
            <motion.animate
              attributeName="opacity"
              values={[0.9, 1, 0.9]}
              dur="2s"
              repeatCount="indefinite"
            />
          </motion.circle>

          {/* Labels –¥–ª—è –∫—Ä—É–≥–æ–≤ */}
          {circles.map((circle, index) => {
            const angle = (index - 1) * 0.8 - 0.4 // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫—Ä—É–≥—É
            const radius = sizes[index] + 15
            const x = 150 + Math.cos(angle) * radius
            const y = 150 + Math.sin(angle) * radius
            const isSelected = selectedCircle === circle.id

            return (
              <motion.text
                key={`label-${circle.id}`}
                x={x}
                y={y}
                textAnchor="middle"
                dominantBaseline="middle"
                className="cursor-pointer select-none"
                fill={isSelected ? '#007AFF' : '#666'}
                fontSize={isSelected ? 14 : 12}
                fontWeight={isSelected ? 'bold' : 'normal'}
                onClick={() => handleCircleClick(circle.id)}
              >
                {circle.icon} {circle.label}
              </motion.text>
            )
          })}

          {/* Gradient –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è */}
          <defs>
            <radialGradient id="gradient-center" cx="50%" cy="50%">
              <stop offset="0%" stopColor="#007AFF" stopOpacity="1" />
              <stop offset="100%" stopColor="#5AC8FA" stopOpacity="0.7" />
            </radialGradient>
          </defs>
        </svg>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
      <AnimatePresence mode="wait">
        {selectedInfo && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ type: "spring", stiffness: 300, damping: 25 }}
          >
            <Card className="mt-6 bg-white/80 backdrop-blur-xl border border-gray-200 shadow-lg">
              <CardContent className="p-4">
                <div className="flex items-center gap-3 mb-3">
                  <div className={`w-12 h-12 ${selectedInfo.color} rounded-full flex items-center justify-center text-2xl`}>
                    {selectedInfo.icon}
                  </div>
                  <h3 className="text-lg font-bold text-gray-900">{selectedInfo.label}</h3>
                </div>
                <p className="text-sm text-gray-700 mb-4">{selectedInfo.description}</p>
                
                {/* –ü—Ä–∏–º–µ—Ä—ã */}
                <div className="space-y-2">
                  <p className="text-xs font-semibold text-gray-600 uppercase tracking-wide">–ü—Ä–∏–º–µ—Ä—ã:</p>
                  <div className="flex flex-wrap gap-2">
                    {selectedInfo.examples.map((example, idx) => (
                      <motion.span
                        key={idx}
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ delay: idx * 0.1 }}
                        className="px-3 py-1 bg-gray-100 rounded-full text-xs text-gray-700"
                      >
                        {example}
                      </motion.span>
                    ))}
                  </div>
                </div>

                {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
                <button
                  onClick={() => setSelectedCircle(null)}
                  className="mt-4 w-full text-sm text-blue-600 hover:text-blue-700 font-medium"
                >
                  –°–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏
                </button>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      {!selectedCircle && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5 }}
          className="mt-4 text-center"
        >
          <p className="text-xs text-gray-500">
            üëÜ –ù–∞–∂–º–∏ –Ω–∞ –ª—é–±–æ–π –∫—Ä—É–≥, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ
          </p>
        </motion.div>
      )}
    </div>
  )
}

