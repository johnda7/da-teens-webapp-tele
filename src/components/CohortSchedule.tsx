import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { 
  Calendar, 
  VideoCamera, 
  Users, 
  ChatCircle, 
  BookOpen, 
  Clock,
  Phone
} from '@phosphor-icons/react'

interface CohortScheduleProps {
  cohortId: string
}

const mockCohortData = {
  'teens-14-16-cohort-a': {
    name: '–ì—Ä—É–ø–ø–∞ A (14-16 –ª–µ—Ç)',
    curator: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
    mentor: '–î–º–∏—Ç—Ä–∏–π –ò–≤–∞–Ω–æ–≤',
    participants: 12,
    schedule: [
      {
        id: 1,
        title: '–ì—Ä—É–ø–ø–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
        type: 'meeting',
        date: '2024-01-15',
        time: '18:00',
        duration: 60,
        status: 'upcoming',
        description: '–û–±—Å—É–∂–¥–∞–µ–º –∏—Ç–æ–≥–∏ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏ –º–æ–¥—É–ª—è "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"',
        meetingLink: '#'
      },
      {
        id: 2,
        title: '–ü—Ä–∞–∫—Ç–∏–∫—É–º: –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏',
        type: 'practice',
        date: '2024-01-17',
        time: '19:00',
        duration: 45,
        status: 'upcoming',
        description: '–ò–∑—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏–∫—É 4-7-8 –∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ',
        meetingLink: '#'
      },
      {
        id: 3,
        title: '–†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
        type: 'reflection',
        date: '2024-01-19',
        time: '18:30',
        duration: 45,
        status: 'upcoming',
        description: '–ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é',
        meetingLink: '#'
      }
    ],
    chatInfo: {
      participantsCount: 12,
      lastMessage: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ì–æ—Ç–æ–≤—ã –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –≤—Å—Ç—Ä–µ—á–µ? üòä',
      lastMessageTime: '14:30'
    }
  }
}

const getStatusBadge = (status: string) => {
  switch (status) {
    case 'upcoming':
      return <Badge className="bg-blue-100 text-blue-800 border-blue-300">–ü—Ä–µ–¥—Å—Ç–æ–∏—Ç</Badge>
    case 'live':
      return <Badge className="bg-green-100 text-green-800 border-green-300">–í —ç—Ñ–∏—Ä–µ</Badge>
    case 'completed':
      return <Badge className="bg-gray-100 text-gray-800 border-gray-300">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</Badge>
    default:
      return <Badge variant="secondary">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</Badge>
  }
}

const getTypeIcon = (type: string) => {
  switch (type) {
    case 'meeting':
      return <Users className="w-4 h-4 text-primary" />
    case 'practice':
      return <BookOpen className="w-4 h-4 text-accent" />
    case 'reflection':
      return <ChatCircle className="w-4 h-4 text-purple-600" />
    default:
      return <Calendar className="w-4 h-4" />
  }
}

const formatDate = (dateString: string) => {
  const date = new Date(dateString)
  const today = new Date()
  const tomorrow = new Date(today)
  tomorrow.setDate(tomorrow.getDate() + 1)
  
  if (date.toDateString() === today.toDateString()) return '–°–µ–≥–æ–¥–Ω—è'
  if (date.toDateString() === tomorrow.toDateString()) return '–ó–∞–≤—Ç—Ä–∞'
  
  return date.toLocaleDateString('ru-RU', { 
    weekday: 'short', 
    day: 'numeric', 
    month: 'short' 
  })
}

export default function CohortSchedule({ cohortId }: CohortScheduleProps) {
  const [activeTab, setActiveTab] = useState('schedule')
  const cohort = mockCohortData[cohortId as keyof typeof mockCohortData]

  if (!cohort) {
    return (
      <div className="text-center py-12">
        <h2 className="text-xl font-semibold text-foreground">–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h2>
        <p className="text-muted-foreground mt-2">–ü—Ä–æ–≤–µ—Ä—å –∫–æ–¥ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É</p>
      </div>
    )
  }

  const nextMeeting = cohort.schedule.find(event => event.status === 'upcoming')

  return (
    <div className="space-y-6">
      {/* Group Header */}
      <Card className="bg-gradient-to-r from-primary/10 to-accent/10 border-primary/20">
        <CardHeader>
          <div className="flex items-start justify-between">
            <div>
              <CardTitle className="text-xl">{cohort.name}</CardTitle>
              <CardDescription className="mt-1">
                –ö—É—Ä–∞—Ç–æ—Ä: {cohort.curator} ‚Ä¢ –ú–µ–Ω—Ç–æ—Ä: {cohort.mentor}
              </CardDescription>
            </div>
            <Badge variant="secondary" className="gap-1">
              <Users className="w-3 h-3" />
              {cohort.participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            </Badge>
          </div>
        </CardHeader>
      </Card>

      {/* Next Meeting Highlight */}
      {nextMeeting && (
        <Card className="border-accent/30 bg-accent/5">
          <CardHeader className="pb-3">
            <div className="flex items-center justify-between">
              <CardTitle className="text-lg text-accent">–ë–ª–∏–∂–∞–π—à–∞—è –≤—Å—Ç—Ä–µ—á–∞</CardTitle>
              {getStatusBadge(nextMeeting.status)}
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h3 className="font-semibold text-foreground">{nextMeeting.title}</h3>
              <p className="text-muted-foreground text-sm mt-1">{nextMeeting.description}</p>
            </div>
            
            <div className="flex items-center gap-4 text-sm">
              <div className="flex items-center gap-1">
                <Calendar className="w-4 h-4 text-muted-foreground" />
                <span>{formatDate(nextMeeting.date)}</span>
              </div>
              <div className="flex items-center gap-1">
                <Clock className="w-4 h-4 text-muted-foreground" />
                <span>{nextMeeting.time} ({nextMeeting.duration} –º–∏–Ω)</span>
              </div>
            </div>

            <Button size="lg" className="w-full gap-2">
              <VideoCamera className="w-4 h-4" weight="fill" />
              –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ
            </Button>
          </CardContent>
        </Card>
      )}

      {/* Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="schedule" className="gap-1">
            <Calendar className="w-4 h-4" />
            –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
          </TabsTrigger>
          <TabsTrigger value="chat" className="gap-1">
            <ChatCircle className="w-4 h-4" />
            –ß–∞—Ç –≥—Ä—É–ø–ø—ã
          </TabsTrigger>
          <TabsTrigger value="materials" className="gap-1">
            <BookOpen className="w-4 h-4" />
            –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
          </TabsTrigger>
        </TabsList>

        <TabsContent value="schedule" className="space-y-4">
          <div className="space-y-3">
            {cohort.schedule.map((event) => (
              <Card key={event.id} className="transition-colors hover:bg-muted/30">
                <CardContent className="p-4">
                  <div className="flex items-start justify-between">
                    <div className="flex gap-3">
                      <div className="mt-1">
                        {getTypeIcon(event.type)}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <h4 className="font-medium text-foreground">{event.title}</h4>
                          {getStatusBadge(event.status)}
                        </div>
                        <p className="text-sm text-muted-foreground mb-2">{event.description}</p>
                        <div className="flex items-center gap-4 text-xs text-muted-foreground">
                          <span>{formatDate(event.date)} –≤ {event.time}</span>
                          <span>{event.duration} –º–∏–Ω—É—Ç</span>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {event.status === 'upcoming' && (
                    <Button variant="outline" size="sm" className="w-full mt-3 gap-2">
                      <VideoCamera className="w-3 h-3" />
                      –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
                    </Button>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="chat" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <ChatCircle className="w-5 h-5" />
                –ß–∞—Ç –≥—Ä—É–ø–ø—ã
              </CardTitle>
              <CardDescription>
                {cohort.chatInfo.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–Ω–ª–∞–π–Ω
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="p-4 bg-muted/50 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <div className="w-8 h-8 bg-primary rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-medium">–ê</span>
                  </div>
                  <div>
                    <span className="text-sm font-medium">–ê–Ω–Ω–∞ (–ö—É—Ä–∞—Ç–æ—Ä)</span>
                    <span className="text-xs text-muted-foreground ml-2">{cohort.chatInfo.lastMessageTime}</span>
                  </div>
                </div>
                <p className="text-sm">{cohort.chatInfo.lastMessage}</p>
              </div>
              
              <Button className="w-full gap-2">
                <ChatCircle className="w-4 h-4" />
                –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –≤ Telegram
              </Button>
              
              <div className="grid grid-cols-2 gap-3">
                <Button variant="outline" size="sm" className="gap-2">
                  <BookOpen className="w-3 h-3" />
                  –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
                </Button>
                <Button variant="outline" size="sm" className="gap-2">
                  <Phone className="w-3 h-3" />
                  SOS-—Å–≤—è–∑—å
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="materials" className="space-y-4">
          <div className="space-y-3">
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                    <BookOpen className="w-5 h-5 text-blue-600" />
                  </div>
                  <div className="flex-1">
                    <h4 className="font-medium">–ö–æ–Ω—Å–ø–µ–∫—Ç: –¢–µ—Ö–Ω–∏–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏</h4>
                    <p className="text-sm text-muted-foreground">PDF ‚Ä¢ 2.3 –ú–ë</p>
                  </div>
                  <Button variant="outline" size="sm">–°–∫–∞—á–∞—Ç—å</Button>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                    <VideoCamera className="w-5 h-5 text-green-600" />
                  </div>
                  <div className="flex-1">
                    <h4 className="font-medium">–ó–∞–ø–∏—Å—å: –ì—Ä—É–ø–ø–æ–≤–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è</h4>
                    <p className="text-sm text-muted-foreground">MP4 ‚Ä¢ 45 –º–∏–Ω—É—Ç</p>
                  </div>
                  <Button variant="outline" size="sm">–°–º–æ—Ç—Ä–µ—Ç—å</Button>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                    <ChatCircle className="w-5 h-5 text-purple-600" />
                  </div>
                  <div className="flex-1">
                    <h4 className="font-medium">–î–Ω–µ–≤–Ω–∏–∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏</h4>
                    <p className="text-sm text-muted-foreground">–®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å–µ–π</p>
                  </div>
                  <Button variant="outline" size="sm">–û—Ç–∫—Ä—ã—Ç—å</Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}