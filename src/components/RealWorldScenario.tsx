// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏
// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏–π

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { 
  Users, 
  ChatCircleDots, 
  Path, 
  CheckCircle, 
  XCircle,
  Lightbulb,
  ArrowRight
} from '@phosphor-icons/react'

interface ScenarioChoice {
  id: string
  text: string
  isHealthy: boolean
  feedback: string
  consequence: string
  skillsUsed?: string[]
}

interface Scenario {
  id: string
  title: string
  context: string
  situation: string
  character: string
  emotionalState: string
  choices: ScenarioChoice[]
}

interface RealWorldScenarioProps {
  scenario: Scenario
  onComplete: (choice: ScenarioChoice) => void
}

export default function RealWorldScenario({
  scenario,
  onComplete
}: RealWorldScenarioProps) {
  const [selectedChoice, setSelectedChoice] = useState<ScenarioChoice | null>(null)
  const [showFeedback, setShowFeedback] = useState(false)

  const handleChoiceSelect = (choice: ScenarioChoice) => {
    setSelectedChoice(choice)
    setShowFeedback(true)
  }

  const handleContinue = () => {
    if (selectedChoice) {
      onComplete(selectedChoice)
    }
  }

  return (
    <div className="space-y-4">
      {/* Scenario Header */}
      <Card className="bg-gradient-to-r from-indigo-50 to-purple-50 border-indigo-200">
        <CardHeader>
          <div className="flex items-start gap-3 mb-2">
            <Users className="w-6 h-6 text-indigo-600 flex-shrink-0" weight="fill" />
            <div>
              <CardTitle className="text-lg">{scenario.title}</CardTitle>
              <CardDescription className="mt-1">{scenario.context}</CardDescription>
            </div>
          </div>
          <div className="flex gap-2 flex-wrap">
            <Badge variant="outline" className="text-xs">
              {scenario.character}
            </Badge>
            <Badge variant="outline" className="text-xs bg-pink-50 border-pink-200 text-pink-700">
              {scenario.emotionalState}
            </Badge>
          </div>
        </CardHeader>
      </Card>

      {/* Situation */}
      <Card>
        <CardContent className="pt-6">
          <div className="bg-blue-50 border-l-4 border-blue-500 p-4 rounded">
            <div className="flex items-start gap-3">
              <ChatCircleDots className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" weight="fill" />
              <p className="text-sm text-blue-900 leading-relaxed">
                {scenario.situation}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Choices */}
      {!showFeedback ? (
        <div className="space-y-3">
          <div className="flex items-center gap-2 mb-2">
            <Path className="w-5 h-5 text-purple-600" weight="fill" />
            <p className="font-semibold text-foreground">–ß—Ç–æ –±—ã —Ç—ã —Å–¥–µ–ª–∞–ª(–∞)?</p>
          </div>
          
          {scenario.choices.map((choice, index) => (
            <Button
              key={choice.id}
              variant="outline"
              className="w-full h-auto py-4 px-4 text-left justify-start hover:border-purple-400 hover:bg-purple-50 transition-all"
              onClick={() => handleChoiceSelect(choice)}
            >
              <div className="flex items-start gap-3 w-full">
                <div className="flex items-center justify-center w-8 h-8 rounded-full bg-purple-100 text-purple-700 font-semibold flex-shrink-0">
                  {index + 1}
                </div>
                <span className="text-sm leading-relaxed">{choice.text}</span>
              </div>
            </Button>
          ))}
        </div>
      ) : selectedChoice && (
        <>
          {/* Feedback */}
          <Alert className={
            selectedChoice.isHealthy
              ? 'bg-green-50 border-green-200'
              : 'bg-orange-50 border-orange-200'
          }>
            <div className="flex items-start gap-3">
              {selectedChoice.isHealthy ? (
                <CheckCircle className="w-6 h-6 text-green-600 flex-shrink-0 mt-0.5" weight="fill" />
              ) : (
                <XCircle className="w-6 h-6 text-orange-600 flex-shrink-0 mt-0.5" weight="fill" />
              )}
              <div className="flex-1">
                <h4 className={`font-semibold mb-2 ${
                  selectedChoice.isHealthy ? 'text-green-900' : 'text-orange-900'
                }`}>
                  {selectedChoice.isHealthy ? '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! üéâ' : '–ú–æ–∂–Ω–æ –±—ã–ª–æ –ª—É—á—à–µ üí≠'}
                </h4>
                <AlertDescription className={
                  selectedChoice.isHealthy ? 'text-green-800' : 'text-orange-800'
                }>
                  <p className="mb-3">{selectedChoice.feedback}</p>
                  <p className="text-sm font-medium mb-2">–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –¥–∞–ª—å—à–µ:</p>
                  <p className="text-sm">{selectedChoice.consequence}</p>
                </AlertDescription>
              </div>
            </div>
          </Alert>

          {/* Skills used */}
          {selectedChoice.skillsUsed && selectedChoice.skillsUsed.length > 0 && (
            <Card className="bg-purple-50 border-purple-200">
              <CardContent className="pt-4">
                <div className="flex items-start gap-3">
                  <Lightbulb className="w-5 h-5 text-purple-600 flex-shrink-0 mt-0.5" weight="fill" />
                  <div>
                    <p className="font-semibold text-purple-900 mb-2">
                      {selectedChoice.isHealthy ? '–ù–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞):' : '–ù–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:'}
                    </p>
                    <div className="flex flex-wrap gap-2">
                      {selectedChoice.skillsUsed.map((skill, idx) => (
                        <Badge key={idx} variant="secondary" className="bg-purple-100 text-purple-700">
                          {skill}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Continue button */}
          <Button
            onClick={handleContinue}
            className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
          >
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å <ArrowRight className="w-4 h-4 ml-2" />
          </Button>
        </>
      )}
    </div>
  )
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
export const exampleScenarios: Scenario[] = [
  {
    id: 'friend-boundary-1',
    title: '–ó–≤–æ–Ω–æ–∫ –≤ 2 —á–∞—Å–∞ –Ω–æ—á–∏',
    context: '–¢–≤–æ–π –¥—Ä—É–≥ —á–∞—Å—Ç–æ –∑–≤–æ–Ω–∏—Ç –ø–æ–∑–¥–Ω–æ –Ω–æ—á—å—é',
    situation: '–£–∂–µ 2 —á–∞—Å–∞ –Ω–æ—á–∏. –¢–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∑–≤–æ–Ω–∏—Ç - —ç—Ç–æ —Ç–≤–æ–π –¥—Ä—É–≥ –≤ —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é. –û–Ω —Ö–æ—á–µ—Ç –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Å–≤–æ–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö. –ó–∞–≤—Ç—Ä–∞ —É —Ç–µ–±—è –≤–∞–∂–Ω–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è.',
    character: '–î—Ä—É–≥, 16 –ª–µ—Ç',
    emotionalState: '–£—Å—Ç–∞–ª–æ—Å—Ç—å, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ',
    choices: [
      {
        id: 'choice-1',
        text: '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –∏ –≤—ã—Å–ª—É—à–∞—Ç—å –¥—Ä—É–≥–∞, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —É—Å—Ç–∞–ª–æ—Å—Ç—å',
        isHealthy: false,
        feedback: '–¢–≤–æ—è –∑–∞–±–æ—Ç–∞ –æ –¥—Ä—É–≥–µ –ø–æ–Ω—è—Ç–Ω–∞, –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—ã–≥–æ—Ä–∞–Ω–∏—é.',
        consequence: '–¢—ã –ø–ª–æ—Ö–æ —Å–ø–∏—à—å, –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –Ω–µ –º–æ–∂–µ—à—å —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è. –î—Ä—É–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∑–≤–æ–Ω–∏—Ç—å –ø–æ–∑–¥–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≥—Ä–∞–Ω–∏—Ü—É.',
        skillsUsed: ['–≠–º–ø–∞—Ç–∏—è (–Ω–æ –±–µ–∑ –±–∞–ª–∞–Ω—Å–∞)']
      },
      {
        id: 'choice-2',
        text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: "–Ø —Ö–æ—á—É —Ç–µ–±–µ –ø–æ–º–æ—á—å, –Ω–æ —Å–µ–π—á–∞—Å –º–Ω–µ –Ω—É–∂–Ω–æ —Å–ø–∞—Ç—å. –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ —à–∫–æ–ª—ã?"',
        isHealthy: true,
        feedback: '–û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ –∏ –¥—Ä—É–≥–µ! –¢—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–æ –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –æ–±–æ–∏—Ö –≤—Ä–µ–º—è.',
        consequence: '–¢—ã —Ö–æ—Ä–æ—à–æ —Å–ø–∏—à—å –∏ —É—Å–ø–µ—à–Ω–æ –ø–∏—à–µ—à—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é. –î—Ä—É–≥ –ø–æ–Ω–∏–º–∞–µ—Ç —Ç–≤–æ—é –≥—Ä–∞–Ω–∏—Ü—É –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–≤–æ–Ω–∏—Ç—å –≤ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è. –í–∞—à–∞ –¥—Ä—É–∂–±–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –∑–¥–æ—Ä–æ–≤–æ–π.',
        skillsUsed: ['–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—Ü', '–£–≤–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', '–°–∞–º–æ–∑–∞–±–æ—Ç–∞', '–≠–º–ø–∞—Ç–∏—è']
      },
      {
        id: 'choice-3',
        text: '–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–≤–æ–Ω–æ–∫ –∏ –≤—ã–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω',
        isHealthy: false,
        feedback: '–ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ –≤–∞–∂–Ω–∞, –Ω–æ –ø–æ–ª–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∞ –º–æ–∂–µ—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º.',
        consequence: '–¢—ã —Å–ø–∏—à—å —Ö–æ—Ä–æ—à–æ, –Ω–æ –¥—Ä—É–≥ –æ–±–∏–∂–µ–Ω –∏ –æ—Ç–¥–∞–ª—è–µ—Ç—Å—è. –í–æ–∑–Ω–∏–∫–∞–µ—Ç –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ.',
        skillsUsed: ['–°–∞–º–æ–∑–∞–±–æ—Ç–∞ (–Ω–æ –±–µ–∑ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏)']
      },
      {
        id: 'choice-4',
        text: '–û—Ç–≤–µ—Ç–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ: "–ù–µ –º–æ–≥—É —Å–µ–π—á–∞—Å", –∏ —Å—Ä–∞–∑—É –±—Ä–æ—Å–∏—Ç—å —Ç—Ä—É–±–∫—É',
        isHealthy: false,
        feedback: '–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—É, –Ω–æ —Ä–µ–∑–∫–∏–π —Ç–æ–Ω –º–æ–∂–µ—Ç –æ–±–∏–¥–µ—Ç—å –¥—Ä—É–≥–∞.',
        consequence: '–î—Ä—É–≥ —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç—ã–º. –ì—Ä–∞–Ω–∏—Ü–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω—ã.',
        skillsUsed: ['–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—É (–Ω–æ –±–µ–∑ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ—Å—Ç–∏)']
      }
    ]
  },
  {
    id: 'family-boundary-1',
    title: '–†–æ–¥–∏—Ç–µ–ª–∏ —á–∏—Ç–∞—é—Ç –ø–µ—Ä–µ–ø–∏—Å–∫—É',
    context: '–†–æ–¥–∏—Ç–µ–ª–∏ —Ö–æ—Ç—è—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ—é –ª–∏—á–Ω—É—é –∂–∏–∑–Ω—å',
    situation: '–¢—ã –æ—Å—Ç–∞–≤–∏–ª —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ —Å—Ç–æ–ª–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –∏ –≤–∏–¥–∏—à—å, —á—Ç–æ –º–∞–º–∞ —á–∏—Ç–∞–µ—Ç —Ç–≤–æ—é –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –¥—Ä—É–∑—å—è–º–∏. –û–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç: "–Ø –ø–µ—Ä–µ–∂–∏–≤–∞—é –∑–∞ —Ç–µ–±—è, –ø–æ—ç—Ç–æ–º—É –¥–æ–ª–∂–Ω–∞ –∑–Ω–∞—Ç—å, –æ —á—ë–º —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å".',
    character: '–ú–∞–º–∞, 42 –≥–æ–¥–∞',
    emotionalState: '–ó–ª–æ—Å—Ç—å, –æ–±–∏–¥–∞, –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏',
    choices: [
      {
        id: 'choice-1',
        text: '–ó–∞–∫—Ä–∏—á–∞—Ç—å: "–≠—Ç–æ –º–æ—è –ª–∏—á–Ω–∞—è –∂–∏–∑–Ω—å! –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤–∞!" –∏ —É–π—Ç–∏, —Ö–ª–æ–ø–Ω—É–≤ –¥–≤–µ—Ä—å—é',
        isHealthy: false,
        feedback: '–¢–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –ø–æ–Ω—è—Ç–Ω—ã, –Ω–æ –∞–≥—Ä–µ—Å—Å–∏—è —É—Å—É–≥—É–±–∏—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—É.',
        consequence: '–†–æ–¥–∏—Ç–µ–ª–∏ –æ–±–∏–∂–µ–Ω—ã –∏ –∑–ª—ã. –ö–æ–Ω—Ç—Ä–æ–ª—å —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è. –î–æ–≤–µ—Ä–∏–µ –ø–æ–¥–æ—Ä–≤–∞–Ω–æ.',
        skillsUsed: ['–í—ã—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π (–Ω–æ –Ω–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ)']
      },
      {
        id: 'choice-2',
        text: '–°–ø–æ–∫–æ–π–Ω–æ —Å–∫–∞–∑–∞—Ç—å: "–ú–∞–º–∞, —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –±–µ—Å–ø–æ–∫–æ–∏—à—å—Å—è. –ù–æ —á—Ç–µ–Ω–∏–µ –º–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞—Ä—É—à–∞–µ—Ç –º–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã. –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–∞ –≤ –º–æ–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–µ –Ω–∞—Ä—É—à–∞—è –º–æ—é –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å?"',
        isHealthy: true,
        feedback: '–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è! –¢—ã –ø—Ä–∏–∑–Ω–∞—ë—à—å —á—É–≤—Å—Ç–≤–∞ –º–∞–º—ã, –Ω–æ —á–µ—Ç–∫–æ –æ–±–æ–∑–Ω–∞—á–∞–µ—à—å —Å–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.',
        consequence: '–ú–∞–º–∞ —É–¥–∏–≤–ª–µ–Ω–∞ —Ç–≤–æ–µ–π –∑—Ä–µ–ª–æ—Å—Ç—å—é. –í—ã –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç–µ—Å—å –æ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–µ: —Ç—ã —Å–∞–º(–∞) —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –æ –≤–∞–∂–Ω–æ–º, –∞ –æ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω. –î–æ–≤–µ—Ä–∏–µ —Ä–∞—Å—Ç—ë—Ç.',
        skillsUsed: ['–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—Ü', '–£–≤–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', '–≠–º–ø–∞—Ç–∏—è', '–ö–æ–º–ø—Ä–æ–º–∏—Å—Å', '–ó—Ä–µ–ª–æ—Å—Ç—å']
      },
      {
        id: 'choice-3',
        text: '–ü—Ä–æ–º–æ–ª—á–∞—Ç—å –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω',
        isHealthy: false,
        feedback: '–ü–∞—Å—Å–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –±–µ–∑ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–æ–∂–µ—Ç —É—Å–∏–ª–∏—Ç—å –Ω–µ–¥–æ–≤–µ—Ä–∏–µ.',
        consequence: '–ú–∞–º–∞ —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–æ–π. –ö–æ–Ω—Ñ–ª–∏–∫—Ç –Ω–µ —Ä–µ—à—ë–Ω, –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã—Ç. –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç—ë—Ç.',
        skillsUsed: ['–ü–æ–ø—ã—Ç–∫–∞ –∑–∞—â–∏—Ç—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ (–Ω–æ –±–µ–∑ –¥–∏–∞–ª–æ–≥–∞)']
      },
      {
        id: 'choice-4',
        text: '–°–∫–∞–∑–∞—Ç—å: "–õ–∞–¥–Ω–æ, –º–∞–º, –ø—Ä–æ–≤–µ—Ä—è–π. –ú–Ω–µ –≤—Å—ë —Ä–∞–≤–Ω–æ"',
        isHealthy: false,
        feedback: '–û—Ç–∫–∞–∑ –æ—Ç —Å–≤–æ–∏—Ö –≥—Ä–∞–Ω–∏—Ü –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –æ–±–∏–¥–µ –∏ –ø–æ—Ç–µ—Ä–µ —É–≤–∞–∂–µ–Ω–∏—è –∫ —Å–µ–±–µ.',
        consequence: '–¢—ã —Ç–µ—Ä—è–µ—à—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å. –ß—É–≤—Å—Ç–≤—É–µ—à—å –æ–±–∏–¥—É –∏ –æ—Ç–¥–∞–ª–µ–Ω–∏–µ –æ—Ç –º–∞–º—ã. –ì—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç—ë—Ä—Ç—ã.',
        skillsUsed: ['–ò–∑–±–µ–≥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ (–≤ —É—â–µ—Ä–± —Å–µ–±–µ)']
      }
    ]
  }
]
