/**
 * House Metaphor Diagram
 * –í–∏–∑—É–∞–ª—å–Ω–∞—è –º–µ—Ç–∞—Ñ–æ—Ä–∞ "–î–æ–º —Å –¥–≤–µ—Ä—å—é" –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –≥—Ä–∞–Ω–∏—Ü
 * –§–∏–ª–æ—Å–æ—Ñ–∏—è: Jobs Simplicity + Google Visual Learning
 */

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Card, CardContent } from '@/components/ui/card'
import { Shield, DoorOpen, LockSimple, Users } from '@phosphor-icons/react'

interface HouseType {
  id: string
  title: string
  description: string
  characteristics: string[]
  pros: string[]
  cons: string[]
  recommendation: string
  icon: React.ReactNode
  color: string
}

const houseTypes: HouseType[] = [
  {
    id: 'open-house',
    title: '–î–æ–º –±–µ–∑ —Å—Ç–µ–Ω',
    description: '–¢—ã –≤–ø—É—Å–∫–∞–µ—à—å –≤—Å–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç. –¢–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.',
    characteristics: [
      '–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å "–Ω–µ—Ç"',
      '–ß—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º',
      '–î—Ä—É–≥–∏–µ —Ä–µ—à–∞—é—Ç –∑–∞ —Ç–µ–±—è',
      '–£—Å—Ç–∞—ë—à—å –æ—Ç –æ–±—â–µ–Ω–∏—è'
    ],
    pros: ['–ú–Ω–æ–≥–æ –¥—Ä—É–∑–µ–π', '–í—Å–µ–≥–¥–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è'],
    cons: [
      '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ',
      '–ù–µ—Ç –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞',
      '–°–ª–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å "–Ω–µ—Ç"'
    ],
    recommendation: '–ü–æ–ø—Ä–æ–±—É–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø—Ä–∞–∫—Ç–∏–∫—É–π—Å—è –≥–æ–≤–æ—Ä–∏—Ç—å "–Ω–µ—Ç" –≤ –º–∞–ª–µ–Ω—å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.',
    icon: <Users className="w-6 h-6" />,
    color: 'from-red-400 to-red-600'
  },
  {
    id: 'fortress-house',
    title: '–ö—Ä–µ–ø–æ—Å—Ç—å',
    description: '–¢—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–ø—É—Å–∫–∞–µ—à—å. –¢–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–∏—à–∫–æ–º –∂—ë—Å—Ç–∫–∏–µ –∏ –≤—ã—Å–æ–∫–∏–µ.',
    characteristics: [
      '–¢—ã –∏–∑–æ–ª–∏—Ä—É–µ—à—å —Å–µ–±—è –æ—Ç–æ –≤—Å–µ—Ö',
      '–ë–æ–∏—à—å—Å—è –±–ª–∏–∑–æ—Å—Ç–∏',
      '–°–ª–æ–∂–Ω–æ –∑–∞–≤–æ–¥–∏—Ç—å –¥—Ä—É–∑–µ–π',
      '–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–æ—Ä–º–æ–π'
    ],
    pros: ['–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å'],
    cons: [
      '–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ',
      '–ù–µ—Ç –±–ª–∏–∑–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π',
      '–°–ª–æ–∂–Ω–æ –ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å'
    ],
    recommendation: '–ù–∞—á–Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–π—Å—è, –ø—Ä–æ–≤–µ—Ä—è—è –≥—Ä–∞–Ω–∏—Ü—ã.',
    icon: <LockSimple className="w-6 h-6" />,
    color: 'from-gray-400 to-gray-600'
  },
  {
    id: 'home-with-door',
    title: '–î–æ–º —Å –¥–≤–µ—Ä—å—é',
    description: '–£ —Ç–µ–±—è –µ—Å—Ç—å –≤—ã–±–æ—Ä. –¢—ã —Ä–µ—à–∞–µ—à—å, –∫–æ–≥–æ –≤–ø—É—Å–∫–∞—Ç—å –∏ –∫–æ–≥–¥–∞.',
    characteristics: [
      '–¢—ã —É–º–µ–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å "–Ω–µ—Ç"',
      '–ó–Ω–∞–µ—à—å, –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö',
      '–ü—Ä–æ—Å–∏—à—å –ø–æ–º–æ—â–∏, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ',
      '–ß—É–≤—Å—Ç–≤—É–µ—à—å –±–∞–ª–∞–Ω—Å'
    ],
    pros: [
      '–ó–¥–æ—Ä–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
      '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
      '–õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ + –±–ª–∏–∑–æ—Å—Ç—å'
    ],
    cons: ['–¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏', '–ù—É–∂–Ω–æ —É—á–∏—Ç—å—Å—è'],
    recommendation: '–≠—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø! –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –∏ –±—ã—Ç—å –≥–∏–±–∫–∏–º.',
    icon: <DoorOpen className="w-6 h-6" />,
    color: 'from-green-400 to-green-600'
  }
]

interface HouseMetaphorDiagramProps {
  onTypeSelect?: (typeId: string) => void
}

export default function HouseMetaphorDiagram({ onTypeSelect }: HouseMetaphorDiagramProps) {
  const [selectedType, setSelectedType] = useState<string | null>(null)
  const [showDetails, setShowDetails] = useState(false)

  const handleTypeClick = (typeId: string) => {
    setSelectedType(typeId)
    setShowDetails(true)
    onTypeSelect?.(typeId)
  }

  const selectedInfo = houseTypes.find(h => h.id === selectedType)

  return (
    <div className="w-full space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <h3 className="text-xl font-bold text-gray-900 mb-2">
          –ö–∞–∫–∏–µ —É —Ç–µ–±—è –≥—Ä–∞–Ω–∏—Ü—ã?
        </h3>
        <p className="text-sm text-gray-600">
          –ü—Ä–µ–¥—Å—Ç–∞–≤—å —Å–≤–æ–π –¥–æ–º. –ö–∞–∫–∞—è —É –Ω–µ–≥–æ –¥–≤–µ—Ä—å?
        </p>
      </div>

      {/* –¢—Ä–∏ —Ç–∏–ø–∞ –¥–æ–º–æ–≤ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {houseTypes.map((house, index) => {
          const isSelected = selectedType === house.id

          return (
            <motion.div
              key={house.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className="relative"
            >
              <Card
                className={`cursor-pointer transition-all duration-300 overflow-hidden ${
                  isSelected
                    ? 'border-2 border-blue-500 shadow-lg scale-105'
                    : 'border border-gray-200 hover:border-gray-300 hover:shadow-md'
                }`}
                onClick={() => handleTypeClick(house.id)}
              >
                {/* Gradient Header */}
                <div className={`bg-gradient-to-br ${house.color} p-6 text-white relative overflow-hidden`}>
                  {/* –ó–∞–¥–Ω–∏–π —Ñ–æ–Ω ‚Äî SVG –¥–æ–º–∏–∫ */}
                  <div className="absolute inset-0 opacity-20">
                    <svg viewBox="0 0 200 150" className="w-full h-full">
                      {/* –î–æ–º–∏–∫ –ø—Ä–æ—Å—Ç–æ–π */}
                      <path
                        d="M 50 80 L 100 30 L 150 80 L 150 120 L 50 120 Z"
                        fill="white"
                        opacity="0.3"
                      />
                      {house.id === 'open-house' && (
                        <rect x="90" y="80" width="20" height="30" fill="none" stroke="white" strokeWidth="2" />
                      )}
                      {house.id === 'fortress-house' && (
                        <rect x="90" y="80" width="20" height="30" fill="white" opacity="0.8" />
                      )}
                      {house.id === 'home-with-door' && (
                        <>
                          <rect x="90" y="80" width="20" height="30" fill="none" stroke="white" strokeWidth="2" />
                          <circle cx="95" cy="95" r="2" fill="white" />
                          <line x1="100" y1="80" x2="100" y2="110" stroke="white" strokeWidth="2" />
                        </>
                      )}
                    </svg>
                  </div>

                  {/* –ò–∫–æ–Ω–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ */}
                  <div className="relative flex flex-col items-center gap-3">
                    <div className="bg-white/20 backdrop-blur-sm rounded-full p-3">
                      {house.icon}
                    </div>
                    <h4 className="text-lg font-bold text-center">{house.title}</h4>
                  </div>
                </div>

                <CardContent className="p-4">
                  <p className="text-sm text-gray-700 text-center min-h-[60px]">
                    {house.description}
                  </p>

                  {/* Badge "–≠—Ç–æ –ø—Ä–æ –º–µ–Ω—è" */}
                  {isSelected && (
                    <motion.div
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      className="mt-3"
                    >
                      <div className="bg-blue-100 text-blue-700 text-xs font-semibold px-3 py-1.5 rounded-full text-center">
                        ‚úì –≠—Ç–æ –ø—Ä–æ –º–µ–Ω—è
                      </div>
                    </motion.div>
                  )}
                </CardContent>
              </Card>
            </motion.div>
          )
        })}
      </div>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <AnimatePresence>
        {showDetails && selectedInfo && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ type: "spring", stiffness: 300, damping: 25 }}
          >
            <Card className="bg-gradient-to-br from-blue-50 to-purple-50 border-2 border-blue-200">
              <CardContent className="p-6">
                <div className="flex items-center gap-3 mb-4">
                  <div className={`bg-gradient-to-br ${selectedInfo.color} text-white rounded-full p-3`}>
                    {selectedInfo.icon}
                  </div>
                  <div>
                    <h4 className="text-xl font-bold text-gray-900">{selectedInfo.title}</h4>
                    <p className="text-sm text-gray-600">{selectedInfo.description}</p>
                  </div>
                </div>

                {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
                <div className="mb-4">
                  <h5 className="text-sm font-semibold text-gray-700 mb-2">üîç –ü—Ä–∏–∑–Ω–∞–∫–∏:</h5>
                  <div className="space-y-1">
                    {selectedInfo.characteristics.map((char, idx) => (
                      <div key={idx} className="flex items-start gap-2 text-sm text-gray-700">
                        <span className="text-gray-400">‚Ä¢</span>
                        <span>{char}</span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* –ü–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã */}
                <div className="grid grid-cols-2 gap-4 mb-4">
                  <div>
                    <h5 className="text-sm font-semibold text-green-700 mb-2">‚úÖ –ü–ª—é—Å—ã:</h5>
                    <div className="space-y-1">
                      {selectedInfo.pros.map((pro, idx) => (
                        <div key={idx} className="text-xs text-gray-700">‚Ä¢ {pro}</div>
                      ))}
                    </div>
                  </div>
                  <div>
                    <h5 className="text-sm font-semibold text-red-700 mb-2">‚ö†Ô∏è –ú–∏–Ω—É—Å—ã:</h5>
                    <div className="space-y-1">
                      {selectedInfo.cons.map((con, idx) => (
                        <div key={idx} className="text-xs text-gray-700">‚Ä¢ {con}</div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è */}
                <div className="bg-white/60 backdrop-blur-sm rounded-lg p-4 border border-gray-200">
                  <div className="flex items-start gap-2">
                    <Shield className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" />
                    <div>
                      <h5 className="text-sm font-semibold text-blue-900 mb-1">
                        üí° –ß—Ç–æ –¥–µ–ª–∞—Ç—å?
                      </h5>
                      <p className="text-sm text-gray-800">{selectedInfo.recommendation}</p>
                    </div>
                  </div>
                </div>

                {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
                <button
                  onClick={() => {
                    setShowDetails(false)
                    setSelectedType(null)
                  }}
                  className="mt-4 w-full text-sm text-blue-600 hover:text-blue-700 font-medium"
                >
                  –°–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏
                </button>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      {!selectedType && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5 }}
          className="text-center"
        >
          <p className="text-xs text-gray-500">
            üëÜ –í—ã–±–µ—Ä–∏ –¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª—å—à–µ –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã
          </p>
        </motion.div>
      )}
    </div>
  )
}

