/**
 * ü§ñ AI –ü–æ–¥—Ä–æ—Å—Ç–æ–∫ - Telegram Bot
 * 
 * –§–∏–ª–æ—Å–æ—Ñ–∏—è Perplexity AI:
 * - –°–∫–æ—Ä–æ—Å—Ç—å > –°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ
 * - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—à–∏–±–∞–µ—Ç—Å—è
 * - Answer Engine, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∞—Ç-–±–æ—Ç
 * - 1% —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
 */

import { Bot, Context, session, SessionFlavor } from 'grammy'
import { config, validateConfig } from './config'
import { analyzeMessage } from './analytics/sentiment'
import { detectCrisis } from './analytics/crisis'
import { generateInsights } from './analytics/insights'
import { getRecommendations } from './recommendations/content'
import { logMetrics } from './utils/metrics'

// Session data structure
interface SessionData {
  userId: number
  username?: string
  messageCount: number
  lastInteraction: Date
  emotionalState?: 'positive' | 'neutral' | 'negative' | 'crisis'
  topics: string[]
}

type MyContext = Context & SessionFlavor<SessionData>

// Initialize bot
const bot = new Bot<MyContext>(config.telegram.botToken)

// Session middleware
bot.use(session({
  initial: (): SessionData => ({
    userId: 0,
    messageCount: 0,
    lastInteraction: new Date(),
    topics: [],
  }),
}))

// Logger middleware
bot.use(async (ctx, next) => {
  const start = Date.now()
  await next()
  const duration = Date.now() - start
  
  logMetrics({
    type: 'request',
    duration,
    userId: ctx.from?.id,
    command: ctx.message?.text?.split(' ')[0],
  })
  
  // Perplexity principle: –æ–¥–µ—Ä–∂–∏–º–æ—Å—Ç—å –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
  if (duration > config.metrics.targetLatencyMs.p90) {
    console.warn(`‚ö†Ô∏è  Slow response: ${duration}ms (target: ${config.metrics.targetLatencyMs.p90}ms)`)
  }
})

// ========================================
// Commands
// ========================================

bot.command('start', async (ctx) => {
  const username = ctx.from?.first_name || '–¥—Ä—É–≥'
  
  await ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, ${username}!\n\n` +
    `–Ø **AI –ü–æ–¥—Ä–æ—Å—Ç–æ–∫** - —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n` +
    `üéØ **–ß—Ç–æ —è —É–º–µ—é:**\n` +
    `‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã\n` +
    `‚Ä¢ –ü–æ–º–æ–≥–∞—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö\n` +
    `‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ª–µ–∑–Ω—ã–µ —É—Ä–æ–∫–∏\n` +
    `‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ\n\n` +
    `üí° **–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ** - —è –ø–æ–π–º—É –∏ –ø–æ–º–æ–≥—É!\n\n` +
    `‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã: /help /stats /recommend`,
    { parse_mode: 'Markdown' }
  )
  
  // Update session
  ctx.session.userId = ctx.from!.id
  ctx.session.username = ctx.from?.username
  ctx.session.messageCount = 0
  ctx.session.lastInteraction = new Date()
})

bot.command('help', async (ctx) => {
  await ctx.reply(
    `üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**\n\n` +
    `/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n` +
    `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n` +
    `/stats - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
    `/recommend - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Ä–æ–∫–æ–≤\n` +
    `/crisis - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å\n\n` +
    `üí¨ **–ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å –º–Ω–µ** - —è –ø–æ–Ω–∏–º–∞—é –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!\n\n` +
    `üîí **–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:** –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –∑–∞—â–∏—â–µ–Ω—ã.`,
    { parse_mode: 'Markdown' }
  )
})

bot.command('stats', async (ctx) => {
  const { messageCount, emotionalState, topics } = ctx.session
  
  const stateEmoji = {
    positive: 'üòä',
    neutral: 'üòê',
    negative: 'üòî',
    crisis: 'üÜò',
  }[emotionalState || 'neutral']
  
  await ctx.reply(
    `üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n` +
    `üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: ${messageCount}\n` +
    `${stateEmoji} –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${emotionalState || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}\n` +
    `üè∑Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã: ${topics.slice(0, 3).join(', ') || '–ø–æ–∫–∞ –Ω–µ—Ç'}\n\n` +
    `–ü—Ä–æ–¥–æ–ª–∂–∞–π –æ–±—â–∞—Ç—å—Å—è - —è —É—á—É—Å—å —Ç–µ–±–µ –ø–æ–º–æ–≥–∞—Ç—å –ª—É—á—à–µ! üöÄ`,
    { parse_mode: 'Markdown' }
  )
})

bot.command('recommend', async (ctx) => {
  await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã...')
  
  const recommendations = await getRecommendations({
    userId: ctx.session.userId,
    topics: ctx.session.topics,
    emotionalState: ctx.session.emotionalState,
  })
  
  if (recommendations.length === 0) {
    await ctx.reply(
      `ü§î –ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n` +
      `–ü–æ–æ–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –Ω–µ–º–Ω–æ–≥–æ - —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!`
    )
    return
  }
  
  let message = `üí° **–†–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–µ–±–µ:**\n\n`
  
  recommendations.forEach((rec, i) => {
    message += `${i + 1}. **${rec.title}**\n`
    message += `   ${rec.description}\n`
    message += `   üîó ${rec.link}\n\n`
  })
  
  await ctx.reply(message, { parse_mode: 'Markdown' })
})

bot.command('crisis', async (ctx) => {
  await ctx.reply(
    `üÜò **–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å**\n\n` +
    `–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ —Å—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å:\n\n` +
    `üìû **–î–µ—Ç—Å–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è**\n` +
    `8-800-2000-122 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, 24/7)\n\n` +
    `üåê **–û–Ω–ª–∞–π–Ω-–ø–æ–º–æ—â—å**\n` +
    `https://pomoschryadom.ru\n\n` +
    `üíö –¢—ã –Ω–µ –æ–¥–∏–Ω. –ï—Å—Ç—å –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç.\n\n` +
    `–Ø —Ç–æ–∂–µ –∑–¥–µ—Å—å - –ø–∏—à–∏ –º–Ω–µ, —è –≤—ã—Å–ª—É—à–∞—é.`,
    { parse_mode: 'Markdown' }
  )
})

// ========================================
// Message Handler (Main Logic)
// ========================================

bot.on('message:text', async (ctx) => {
  const text = ctx.message.text
  const userId = ctx.from.id
  
  // Update session
  ctx.session.userId = userId
  ctx.session.messageCount++
  ctx.session.lastInteraction = new Date()
  
  try {
    // 1. Crisis Detection (highest priority)
    if (config.crisis.enabled) {
      const crisisResult = await detectCrisis(text)
      
      if (crisisResult.isCrisis) {
        ctx.session.emotionalState = 'crisis'
        
        await ctx.reply(
          `üíö –Ø –≤–∏–∂—É, —á—Ç–æ —Ç–µ–±–µ —Å–µ–π—á–∞—Å —Ç—è–∂–µ–ª–æ.\n\n` +
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∑–∞ –ø–æ–º–æ—â—å—é:\n\n` +
          `üìû –î–µ—Ç—Å–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122\n` +
          `üåê https://pomoschryadom.ru\n\n` +
          `–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å —Ç–µ–±—è. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?`
        )
        
        // Notify human moderators
        if (config.crisis.notifyHumans) {
          console.error(`üö® CRISIS DETECTED: User ${userId}: "${text}"`)
          // TODO: Send to monitoring system
        }
        
        return
      }
    }
    
    // 2. Sentiment Analysis
    if (config.analytics.sentimentAnalysis) {
      const sentiment = await analyzeMessage(text)
      ctx.session.emotionalState = sentiment.label
      
      // Update topics
      if (sentiment.topics && sentiment.topics.length > 0) {
        ctx.session.topics = [
          ...new Set([...sentiment.topics, ...ctx.session.topics])
        ].slice(0, 10) // Keep last 10 unique topics
      }
    }
    
    // 3. Generate AI Response (Answer Engine approach)
    const response = await generateAIResponse(text, ctx.session)
    
    // 4. Send response
    await ctx.reply(response, { parse_mode: 'Markdown' })
    
    // 5. Log insights (for product improvements)
    if (ctx.session.messageCount % 10 === 0) {
      // Every 10 messages, generate insights
      await generateInsights({
        userId,
        messages: ctx.session.messageCount,
        topics: ctx.session.topics,
        emotionalState: ctx.session.emotionalState,
      })
    }
    
  } catch (error) {
    console.error('‚ùå Error processing message:', error)
    
    await ctx.reply(
      `–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ\n\n` +
      `–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help`
    )
  }
})

// ========================================
// AI Response Generation
// ========================================

async function generateAIResponse(
  message: string,
  session: SessionData
): Promise<string> {
  // TODO: Integrate with OpenAI/Anthropic
  // For now, simple rule-based responses
  
  const lowerMessage = message.toLowerCase()
  
  // Greetings
  if (/–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|—Ö–∞–π|hi|hello/.test(lowerMessage)) {
    return `–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`
  }
  
  // Gratitude
  if (/—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä/.test(lowerMessage)) {
    return `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –Ø —Ä–∞–¥ –ø–æ–º–æ—á—å. –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã?`
  }
  
  // Questions about stress
  if (/—Å—Ç—Ä–µ—Å—Å|—Ç—Ä–µ–≤–æ–≥–∞|–≤–æ–ª–Ω—É—é/.test(lowerMessage)) {
    return (
      `–ü–æ–Ω–∏–º–∞—é, —Å—Ç—Ä–µ—Å—Å ‚Äî —ç—Ç–æ —Ç—è–∂–µ–ª–æ üíô\n\n` +
      `–í–æ—Ç —á—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å:\n` +
      `‚Ä¢ –ì–ª—É–±–æ–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ: 4 —Å—á–µ—Ç–∞ –≤–¥–æ—Ö, 4 –≤—ã–¥–æ—Ö\n` +
      `‚Ä¢ –ü—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ\n` +
      `‚Ä¢ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∫–µ–º-—Ç–æ\n\n` +
      `–•–æ—á–µ—à—å, –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É—Ä–æ–∫ –ø—Ä–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º? (/recommend)`
    )
  }
  
  // Questions about school
  if (/—à–∫–æ–ª–∞|—É—á—ë–±–∞|—É—Ä–æ–∫|—ç–∫–∑–∞–º–µ–Ω/.test(lowerMessage)) {
    return (
      `–®–∫–æ–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–æ—Å—Ç–æ–π üìö\n\n` +
      `–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç? –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –ø–æ–º–æ—á—å!\n\n` +
      `–£ –Ω–∞—Å –µ—Å—Ç—å —É—Ä–æ–∫–∏ –ø—Ä–æ:\n` +
      `‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º\n` +
      `‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º\n` +
      `‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏—é –∫ —É—á–µ–±–µ`
    )
  }
  
  // Default response (conversational)
  return (
    `–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! ü§î\n\n` +
    `–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –±–æ–ª—å—à–µ - —è —Ö–æ—á—É –ø–æ–Ω—è—Ç—å –∏ –ø–æ–º–æ—á—å.\n\n` +
    `üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ:\n` +
    `‚Ä¢ –°—Ç—Ä–µ—Å—Å–µ –∏ —Ç—Ä–µ–≤–æ–≥–µ\n` +
    `‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å –¥—Ä—É–∑—å—è–º–∏\n` +
    `‚Ä¢ –®–∫–æ–ª–µ –∏ —É—á—ë–±–µ\n` +
    `‚Ä¢ –ò–ª–∏ –æ —á—ë–º —É–≥–æ–¥–Ω–æ!\n\n` +
    `–¢–∞–∫–∂–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã: /recommend /stats /help`
  )
}

// ========================================
// Error Handler
// ========================================

bot.catch((err) => {
  console.error('‚ùå Bot error:', err)
  
  // Send to monitoring (Sentry)
  if (config.monitoring.sentry.enabled) {
    // TODO: Sentry.captureException(err)
  }
})

// ========================================
// Start Bot
// ========================================

export async function startBot() {
  try {
    // Validate configuration
    validateConfig()
    
    console.log('ü§ñ Starting AI –ü–æ–¥—Ä–æ—Å—Ç–æ–∫ Bot...')
    
    // Production: use webhooks
    if (config.server.nodeEnv === 'production' && config.telegram.webhookUrl) {
      console.log(`üåê Using webhook: ${config.telegram.webhookUrl}`)
      await bot.api.setWebhook(config.telegram.webhookUrl, {
        secret_token: config.telegram.webhookSecret,
      })
    } else {
      // Development: long polling
      console.log('üîÑ Using long polling (development mode)')
      await bot.start()
    }
    
    console.log('‚úÖ Bot started successfully!')
    console.log(`üìä Metrics: http://localhost:${config.server.port}/metrics`)
    
  } catch (error) {
    console.error('‚ùå Failed to start bot:', error)
    process.exit(1)
  }
}

// Graceful shutdown
process.once('SIGINT', () => {
  console.log('\nüëã Shutting down bot...')
  bot.stop()
})

process.once('SIGTERM', () => {
  console.log('\nüëã Shutting down bot...')
  bot.stop()
})

export default bot

// Start if run directly
if (require.main === module) {
  startBot()
}
